plugins {
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    group = 'com.github.michaelruocco.idv'
    version = '1.0.0-SNAPSHOT'

    apply plugin: 'java'

    sourceCompatibility = 1.8

    dependencies {
        compile 'org.projectlombok:lombok:1.18.6'
        compile 'org.slf4j:slf4j-api:1.7.26'

        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.12.1'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile 'org.slf4j:slf4j-simple:1.7.26'
        testCompile 'com.github.michaelruocco:file-loader:4.0.0'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test

    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}