{
	"info": {
		"_postman_id": "395d7deb-7430-4be0-9f15-bbe019650803",
		"name": "idv",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Post verification context rsa online purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbfddb6a-730e-400d-bfe0-9bd57c15cc7f",
						"exec": [
							"pm.test(\"should return 201 status\", function () {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"should return physical pinsentry as first verification method\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var firstMethod = json.data.attributes.eligibleMethods[0];",
							"    pm.expect(firstMethod.name).to.equal(\"PHYSICAL_PINSENTRY\");",
							"})",
							"",
							"pm.test(\"should return otp sms as second verification method\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var firstMethod = json.data.attributes.eligibleMethods[1];",
							"    pm.expect(firstMethod.name).to.equal(\"OTP_SMS\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"type\": \"verificationContexts\",\n        \"attributes\": {\n            \"channel\": {\n                \"id\": \"RSA\"\n            },\n            \"activity\": {\n                \"type\": \"ONLINE_PURCHASE\",\n                \"timestamp\": \"2019-03-10T12:53:57.547Z\",\n                \"properties\": {\n                    \"reference\": \"ABC123\",\n                    \"cost\": {\n                        \"amount\": 10.99,\n                        \"currency\": \"GBP\"\n                    },\n                    \"merchant\": \"Amazon\"\n                }\n            },\n            \"providedAlias\": {\n                \"type\": \"CREDIT_CARD_NUMBER\",\n                \"format\": \"TOKENIZED\",\n                \"value\": \"3489347343788005\"\n            }\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{host}}/verificationContexts",
					"host": [
						"{{host}}"
					],
					"path": [
						"verificationContexts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post verification context as3 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbfddb6a-730e-400d-bfe0-9bd57c15cc7f",
						"exec": [
							"pm.test(\"should return 201 status\", function () {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"should return push notification as first verification method\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var firstMethod = json.data.attributes.eligibleMethods[0];",
							"    pm.expect(firstMethod.name).to.equal(\"PUSH_NOTIFICATION\");",
							"})",
							"",
							"pm.test(\"should return physical pinsentry as second verification method\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var firstMethod = json.data.attributes.eligibleMethods[1];",
							"    pm.expect(firstMethod.name).to.equal(\"PHYSICAL_PINSENTRY\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"type\": \"verificationContexts\",\n        \"attributes\": {\n            \"channel\": {\n                \"id\": \"AS3\"\n            },\n            \"activity\": {\n                \"type\": \"LOGIN\",\n                \"timestamp\": \"2019-03-10T12:53:57.547Z\"\n            },\n            \"providedAlias\": {\n                \"type\": \"UKC_CARDHOLDER_ID\",\n                \"format\": \"CLEAR_TEXT\",\n                \"value\": \"12345678\"\n            }\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{host}}/verificationContexts",
					"host": [
						"{{host}}"
					],
					"path": [
						"verificationContexts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity by idv id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbfddb6a-730e-400d-bfe0-9bd57c15cc7f",
						"exec": [
							"pm.test(\"should return 200 status\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"should return correct identity\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var identityId = json.data.id;",
							"    pm.expect(identityId).to.equal(\"3713f6f6-8fa6-4686-bcbc-e348ee3b4b06\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities/3713f6f6-8fa6-4686-bcbc-e348ee3b4b06",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities",
						"3713f6f6-8fa6-4686-bcbc-e348ee3b4b06"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity by cardholder id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "205180a0-738a-4c23-a26d-4dfe79ade434",
						"exec": [
							"pm.test(\"should return 200 status\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"should return correct identity\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var identityId = json.data.id;",
							"    pm.expect(identityId).to.equal(\"3713f6f6-8fa6-4686-bcbc-e348ee3b4b06\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities?aliasType=UKC_CARDHOLDER_ID&aliasValue=12345678",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities"
					],
					"query": [
						{
							"key": "aliasType",
							"value": "UKC_CARDHOLDER_ID"
						},
						{
							"key": "aliasValue",
							"value": "12345678"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity by customer id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c02761c1-a436-4906-84f2-f92a28a86fcf",
						"exec": [
							"pm.test(\"should return 200 status\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"should return correct identity\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    var identityId = json.data.id;",
							"    pm.expect(identityId).to.equal(\"3713f6f6-8fa6-4686-bcbc-e348ee3b4b06\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities?aliasType=BUK_CUSTOMER_ID&aliasValue=1111111111",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities"
					],
					"query": [
						{
							"key": "aliasType",
							"value": "BUK_CUSTOMER_ID"
						},
						{
							"key": "aliasValue",
							"value": "1111111111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity alias not provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "205180a0-738a-4c23-a26d-4dfe79ade434",
						"exec": [
							"pm.test(\"should return 400 status\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"pm.test(\"should return correct error\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    pm.expect(json.errors[0].title).to.equal(\"Bad Request\");",
							"    pm.expect(json.errors[0].detail).to.equal(\"Either IDV ID or aliasType and aliasValue must be provided\");",
							"    pm.expect(json.errors[0].meta).to.eql({});",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c02761c1-a436-4906-84f2-f92a28a86fcf",
						"exec": [
							"pm.test(\"should return 404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test(\"should return correct identity\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    pm.expect(json.errors[0].title).to.equal(\"Identity not found\");",
							"    pm.expect(json.errors[0].detail).to.equal(\"Identity not found using alias type BUK_CUSTOMER_ID and CLEAR_TEXT value 1111111112\");",
							"    pm.expect(json.errors[0].meta).to.eql({",
							"                \"alias\": {",
							"                    \"type\": \"BUK_CUSTOMER_ID\",",
							"                    \"format\": \"CLEAR_TEXT\",",
							"                    \"value\": \"1111111112\"",
							"                }",
							"            });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities?aliasType=BUK_CUSTOMER_ID&aliasValue=1111111112",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities"
					],
					"query": [
						{
							"key": "aliasType",
							"value": "BUK_CUSTOMER_ID"
						},
						{
							"key": "aliasValue",
							"value": "1111111112"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity bad request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c02761c1-a436-4906-84f2-f92a28a86fcf",
						"exec": [
							"pm.test(\"should return 400 status\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"pm.test(\"should return correct error\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    pm.expect(json.errors[0].title).to.equal(\"Bad Request\");",
							"    pm.expect(json.errors[0].detail).to.equal(\"Either IDV ID or aliasType and aliasValue must be provided\");",
							"    pm.expect(json.errors[0].meta).to.eql({});",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities?aliasTyp=BUK_CUSTOMER_ID&aliasValu=1111111111",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities"
					],
					"query": [
						{
							"key": "aliasTyp",
							"value": "BUK_CUSTOMER_ID"
						},
						{
							"key": "aliasValu",
							"value": "1111111111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Identity with invalid idv id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c02761c1-a436-4906-84f2-f92a28a86fcf",
						"exec": [
							"pm.test(\"should return 400 status\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"pm.test(\"should return correct error\", function () {",
							"    var json = JSON.parse(responseBody)",
							"    pm.expect(json.errors[0].title).to.equal(\"Bad Request\");",
							"    pm.expect(json.errors[0].detail).to.equal(\"IDV ID value is invalid value it must be a valid UUID\");",
							"    pm.expect(json.errors[0].meta).to.eql({",
							"        \"value\": \"value\"",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/identities/value",
					"host": [
						"{{host}}"
					],
					"path": [
						"identities",
						"value"
					]
				}
			},
			"response": []
		}
	]
}